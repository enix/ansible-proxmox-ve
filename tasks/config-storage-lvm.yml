---


# Create device vg
- name: "Create LVM vg"
  community.general.lvg:
    vg: "{{ item.name }}"
    pvs: "{{ item.devices | join(',') }}"
    pesize: "{{ item.pesize }}"
    state: present
  with_items:
    - "{{ proxmox_ve__storage_lvm }}"

# Disable autoactivation of volumes
- name: "Disable LVM auto volume activation"
  ansible.builtin.lineinfile:
    path: /etc/lvm/lvm.conf
    regexp: "^auto_activation_volume_list ="
    line: "auto_activation_volume_list = []"
    insertafter: "^\t# auto_activation_volume_list = "
    state: present
    backup: yes

# Check global_filter configuration
- name: "Set LVM global_filter configuration"
  ansible.builtin.lineinfile:
    path: /etc/lvm/lvm.conf
    regexp: "^([ \t]*global_filter =).*"
    line: '\1 {{ proxmox_ve__lvm_global_filter }}'
    state: present
    backrefs: yes
    backup: yes

- name: "Configure LVM options"
  ansible.builtin.lineinfile:
    path: /etc/lvm/lvm.conf
    backrefs: yes
    regexp: "^#?[ \t]*{{ item.option }}.+$"
    line: "{{ item.option }} = {{ item.value }}"
    state: "{{ item.state | default('present') }}"
    backup: yes
  with_items: "{{ proxmox_ve__storage_lvm_options }}"

- name: "Check LVM storage existence"
  ansible.builtin.command: pvesm list {{ item.name }}
  ignore_errors: yes
  changed_when: False
  with_items:
    - "{{ proxmox_ve__storage_lvm }}"
  register: pve_lvm_list

- name: "Add LVM storage configuration"
  ansible.builtin.command: pvesm add lvm {{ item.item.name }} --vgname {{ item.item.name }}
  when: item.rc != 0
  loop: "{{ pve_lvm_list.results }}"
  register: pvesm_output
  changed_when: pvesm_output.rc != 0

# unfortunaly there is no way to find a change. rc value always 0 and no stdout
- name: "Set LVM storage content property"
  ansible.builtin.command: pvesm set {{ item.name }} --content images
  with_items:
    - "{{ proxmox_ve__storage_lvm }}"
  register: pvesm_output
  changed_when: pvesm_output.rc != 0

- name: "Set LVM storage shared property"
  ansible.builtin.command: pvesm set {{ item.name }} --shared {{ item.shared }}
  with_items:
    - "{{ proxmox_ve__storage_lvm }}"
  register: pvesm_output
  changed_when: pvesm_output.rc != 0

- name: "Set LVM storage saferemove property"
  ansible.builtin.command: pvesm set {{ item.name }} --saferemove {{ item.saferemove }} --saferemove_throughput {{ item.saferemove_throughput }}
  when:
    - item.saferemove is defined
    # - item.saferemove_throughput is defined
  loop: "{{ proxmox_ve__storage_lvm | flatten(levels=1) }}"
  register: pvesm_output
  changed_when: pvesm_output.rc != 0

- name: "Check proxmox storage status"
  ansible.builtin.command: pvesm status
  register: pvesm_output
  changed_when: pvesm_output.rc != 0
